Index: api/src/main/java/masssh/boilerplate/spring/spa/api/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- api/src/main/java/masssh/boilerplate/spring/spa/api/service/UserService.java	(revision 72092e3391bb6a62d96b9c8e7c39a4697b935bb6)
+++ api/src/main/java/masssh/boilerplate/spring/spa/api/service/UserService.java	(date 1575767758503)
@@ -15,6 +15,7 @@
 import org.springframework.util.DigestUtils;
 import org.springframework.util.StringUtils;
 import org.springframework.web.server.ResponseStatusException;
+import javax.servlet.http.Cookie;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.UUID;
@@ -27,6 +28,14 @@
     private final OAuth2GoogleDao oAuth2GoogleDao;
     private final PasswordEncoder passwordEncoder;
 
+    public Optional<UserRow> loadUserByEmail(final String email) {
+        return userDao.singleByEmail(email);
+    }
+
+    public Optional<UserRow> loadUserFromCookie(final Cookie[] cookies) {
+
+    }
+
     public void registerUser(final String userName, final String password, final String email, final Locale locale) {
         createUser(userName, password, email, locale.toLanguageTag(), null);
     }
Index: dao/src/main/java/masssh/boilerplate/spring/spa/dao/UserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dao/src/main/java/masssh/boilerplate/spring/spa/dao/UserDao.java	(revision 72092e3391bb6a62d96b9c8e7c39a4697b935bb6)
+++ dao/src/main/java/masssh/boilerplate/spring/spa/dao/UserDao.java	(date 1575765456298)
@@ -28,6 +28,10 @@
     @Select("SELECT * FROM user WHERE email = #{email}")
     Optional<UserRow> singleByEmail(@Param("email") String email);
 
+    @Select("SELECT * FROM user WHERE email = #{email} AND password = #{password}")
+    Optional<UserRow> singleByEmailAndPassword(@Param("email") String email,
+                                               @Param("password") String password);
+
     @SelectProvider(type = SqlProvider.class)
     @ResultMap({"masssh.user-oauth2_google"})
     Optional<UserRow> singleOAuth2Detail(String subject);
Index: client/nuxt.config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/nuxt.config.js	(revision 72092e3391bb6a62d96b9c8e7c39a4697b935bb6)
+++ client/nuxt.config.js	(date 1575730984936)
@@ -55,7 +55,17 @@
    */
   axios: {},
 
-  auth: {},
+  auth: {
+    strategies: {
+      local: {
+        endpoints: {
+          login: { url: '/api/login', method: 'post', propertyName: 'token' }
+        },
+        tokenRequired: true,
+        tokenType: 'bearer'
+      }
+    }
+  },
 
   /*
    ** vuetify module configuration
Index: api/src/main/java/masssh/boilerplate/spring/spa/api/security/ApplicationUserDetailsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- api/src/main/java/masssh/boilerplate/spring/spa/api/security/ApplicationUserDetailsService.java	(revision 72092e3391bb6a62d96b9c8e7c39a4697b935bb6)
+++ api/src/main/java/masssh/boilerplate/spring/spa/api/security/ApplicationUserDetailsService.java	(date 1575767371180)
@@ -6,7 +6,6 @@
 import masssh.boilerplate.spring.spa.model.row.UserRow;
 import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;
 import org.springframework.security.core.userdetails.UserDetails;
-import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
 import org.springframework.stereotype.Component;
@@ -14,20 +13,10 @@
 
 @Component
 @RequiredArgsConstructor
-public class ApplicationUserDetailsService implements UserDetailsService, AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> {
+public class ApplicationUserDetailsService implements AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> {
     private final UserDao userDao;
     private final UserService userService;
 
-    @Override
-    public UserDetails loadUserByUsername(final String email) throws UsernameNotFoundException {
-        final Optional<UserRow> userRowOptional = userDao.singleByEmail(email);
-        if (userRowOptional.isPresent()) {
-            final UserRow userRow = userRowOptional.get();
-            return new ApplicationUserDetails(userRow);
-        }
-        throw new UsernameNotFoundException("user not found.");
-    }
-
     @Override
     public UserDetails loadUserDetails(PreAuthenticatedAuthenticationToken token) throws UsernameNotFoundException {
         final String userId = (String) token.getPrincipal();
Index: api/src/main/java/masssh/boilerplate/spring/spa/api/security/WebSecurityConfigurer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- api/src/main/java/masssh/boilerplate/spring/spa/api/security/WebSecurityConfigurer.java	(revision 72092e3391bb6a62d96b9c8e7c39a4697b935bb6)
+++ api/src/main/java/masssh/boilerplate/spring/spa/api/security/WebSecurityConfigurer.java	(date 1575765114076)
@@ -13,7 +13,6 @@
 import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider;
 import org.springframework.security.web.authentication.preauth.RequestHeaderAuthenticationFilter;
 import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
 import org.springframework.security.web.util.matcher.AnyRequestMatcher;
 import org.springframework.web.cors.CorsConfiguration;
 import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
@@ -53,12 +52,12 @@
         http.addFilter(requestHeaderAuthenticationFilter);
 
         // Login API
-        final RestAuthenticationFilter restAuthenticationFilter = new RestAuthenticationFilter();
-        restAuthenticationFilter.setAuthenticationManager(super.authenticationManager());
-        restAuthenticationFilter.setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher("/api/login", "POST"));
-        restAuthenticationFilter.setAuthenticationSuccessHandler(restAuthenticationSuccessHandler);
-        restAuthenticationFilter.setAuthenticationFailureHandler(restAuthenticationFailureHandler);
-        http.addFilter(restAuthenticationFilter);
+//        final RestAuthenticationFilter restAuthenticationFilter = new RestAuthenticationFilter();
+//        restAuthenticationFilter.setAuthenticationManager(super.authenticationManager());
+//        restAuthenticationFilter.setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher("/api/login", "POST"));
+//        restAuthenticationFilter.setAuthenticationSuccessHandler(restAuthenticationSuccessHandler);
+//        restAuthenticationFilter.setAuthenticationFailureHandler(restAuthenticationFailureHandler);
+//        http.addFilter(restAuthenticationFilter);
 
         http.oauth2Login()
                 .successHandler(restAuthenticationSuccessHandler)
Index: api/src/main/java/masssh/boilerplate/spring/spa/api/security/ApplicationUserDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- api/src/main/java/masssh/boilerplate/spring/spa/api/security/ApplicationUserDetails.java	(revision 72092e3391bb6a62d96b9c8e7c39a4697b935bb6)
+++ api/src/main/java/masssh/boilerplate/spring/spa/api/security/ApplicationUserDetails.java	(date 1575767357545)
@@ -8,10 +8,10 @@
 import java.util.Collection;
 
 @Data
-class ApplicationUserDetails implements UserDetails {
+public class ApplicationUserDetails implements UserDetails {
     private final UserRow userRow;
 
-    ApplicationUserDetails(final UserRow userRow) {
+    public ApplicationUserDetails(final UserRow userRow) {
         this.userRow = userRow;
     }
 
